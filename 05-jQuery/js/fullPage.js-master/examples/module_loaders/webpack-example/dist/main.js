!function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=1)}([function(e,t,n){var o;
/*!
 * fullPage 3.0.2
 * https://github.com/alvarotrigo/fullPage.js
 *
 * @license GPLv3 for open source use only
 * or Fullpage Commercial License for commercial use
 * http://alvarotrigo.com/fullPage/pricing/
 *
 * Copyright (C) 2018 http://alvarotrigo.com/fullPage - A project by Alvaro Trigo
 */
/*!
 * fullPage 3.0.2
 * https://github.com/alvarotrigo/fullPage.js
 *
 * @license GPLv3 for open source use only
 * or Fullpage Commercial License for commercial use
 * http://alvarotrigo.com/fullPage/pricing/
 *
 * Copyright (C) 2018 http://alvarotrigo.com/fullPage - A project by Alvaro Trigo
 */
!function(r,i,l,a,c){void 0===(o=function(){return r.fullpage=a(i,l),r.fullpage}.call(t,n,t,e))||(e.exports=o)}(this,window,document,function(e,t){"use strict";var n="fullpage-wrapper",o="."+n,r="fp-responsive",i="fp-notransition",l="fp-destroyed",a="fp-enabled",c="fp-viewing",s="active",u="."+s,f="fp-completely",d="."+f,v=".section",p="fp-section",h="."+p,g=h+u,m="fp-tableCell",b="."+m,S="fp-auto-height",y="fp-normal-scroll",w="fp-nav",E="#"+w,L="fp-tooltip",x="."+L,T="fp-show-active",A=".slide",k="fp-slide",M="."+k,O=M+u,C="fp-slides",H="."+C,I="fp-slidesContainer",R="."+I,B="fp-table",j="fp-slidesNav",z="."+j,N=z+" a",P=".fp-controlArrow",D="fp-prev",V="fp-controlArrow "+D,_=P+("."+D),Y="fp-controlArrow fp-next",F=P+".fp-next";function U(t,n){e.console&&e.console[t]&&e.console[t]("fullPage: "+n)}function W(e,n){return(n=arguments.length>1?n:t)?n.querySelectorAll(e):null}function X(e){e=e||{};for(var t=1;t<arguments.length;t++){var n=arguments[t];if(n)for(var o in n)n.hasOwnProperty(o)&&("object"==typeof n[o]&&null!=n[o]?e[o]=X(e[o],n[o]):e[o]=n[o])}return e}function K(e,t){return null!=e&&(e.classList?e.classList.contains(t):new RegExp("(^| )"+t+"( |$)","gi").test(e.className))}function q(){return"innerHeight"in e?e.innerHeight:t.documentElement.offsetHeight}function Q(e,t){var n;for(n in e=oe(e),t)if(t.hasOwnProperty(n)&&null!==n)for(var o=0;o<e.length;o++){e[o].style[n]=t[n]}return e}function G(e,t,n){for(var o=e[n];o&&!Ee(o,t);)o=o[n];return o}function $(e,t){return G(e,t,"previousElementSibling")}function J(e,t){return G(e,t,"nextElementSibling")}function Z(e){return e.previousElementSibling}function ee(e){return e.nextElementSibling}function te(e){return e[e.length-1]}function ne(e,t){e=le(e)?e[0]:e;for(var n=null!=t?W(t,e.parentNode):e.parentNode.childNodes,o=0,r=0;r<n.length;r++){if(n[r]==e)return o;1==n[r].nodeType&&o++}return-1}function oe(e){return le(e)?e:[e]}function re(e){e=oe(e);for(var t=0;t<e.length;t++)e[t].style.display="none";return e}function ie(e){e=oe(e);for(var t=0;t<e.length;t++)e[t].style.display="block";return e}function le(e){return"[object Array]"===Object.prototype.toString.call(e)||"[object NodeList]"===Object.prototype.toString.call(e)}function ae(e,t){e=oe(e);for(var n=0;n<e.length;n++){var o=e[n];o.classList?o.classList.add(t):o.className+=" "+t}return e}function ce(e,t){e=oe(e);for(var n=t.split(" "),o=0;o<n.length;o++){t=n[o];for(var r=0;r<e.length;r++){var i=e[r];i.classList?i.classList.remove(t):i.className=i.className.replace(new RegExp("(^|\\b)"+t.split(" ").join("|")+"(\\b|$)","gi")," ")}}return e}function se(e,t){t.appendChild(e)}function ue(e,n,o){var r;n=n||t.createElement("div");for(var i=0;i<e.length;i++){var l=e[i];(o&&!i||!o)&&(r=n.cloneNode(!0),l.parentNode.insertBefore(r,l)),r.appendChild(l)}return e}function fe(e,t){ue(e,t,!0)}function de(e,t){for("string"==typeof t&&(t=xe(t)),e.appendChild(t);e.firstChild!==t;)t.appendChild(e.firstChild)}function ve(e,t){return e&&1===e.nodeType?Ee(e,t)?e:ve(e.parentNode,t):null}function pe(e,t){ge(e,e.nextSibling,t)}function he(e,t){ge(e,e,t)}function ge(e,t,n){le(n)||("string"==typeof n&&(n=xe(n)),n=[n]);for(var o=0;o<n.length;o++)e.parentNode.insertBefore(n[o],t)}function me(){var n=t.documentElement;return(e.pageYOffset||n.scrollTop)-(n.clientTop||0)}function be(e){return Array.prototype.filter.call(e.parentNode.children,function(t){return t!==e})}function Se(e){e.preventDefault?e.preventDefault():e.returnValue=!1}function ye(e){if("function"==typeof e)return!0;var t=Object.prototype.toString(e);return"[object Function]"===t||"[object GeneratorFunction]"===t}function we(n,o,r){var i;r=void 0===r?{}:r,"function"==typeof e.CustomEvent?i=new CustomEvent(o,{detail:r}):(i=t.createEvent("CustomEvent")).initCustomEvent(o,!0,!0,r),n.dispatchEvent(i)}function Ee(e,t){return(e.matches||e.matchesSelector||e.msMatchesSelector||e.mozMatchesSelector||e.webkitMatchesSelector||e.oMatchesSelector).call(e,t)}function Le(e,t){if("boolean"==typeof t)for(var n=0;n<e.length;n++)e[n].style.display=t?"block":"none";return e}function xe(e){var n=t.createElement("div");return n.innerHTML=e.trim(),n.firstChild}function Te(e){e=oe(e);for(var t=0;t<e.length;t++){var n=e[t];n&&n.parentElement&&n.parentNode.removeChild(n)}}function Ae(e,t,n){for(var o=e[n],r=[];o;)(Ee(o,t)||null==t)&&r.push(o),o=o[n];return r}function ke(e,t){return Ae(e,t,"nextElementSibling")}function Me(e,t){return Ae(e,t,"previousElementSibling")}return e.NodeList&&!NodeList.prototype.forEach&&(NodeList.prototype.forEach=function(t,n){n=n||e;for(var o=0;o<this.length;o++)t.call(n,this[o],o,this)}),e.fp_utils={$:W,deepExtend:X,hasClass:K,getWindowHeight:q,css:Q,until:G,prevUntil:$,nextUntil:J,prev:Z,next:ee,last:te,index:ne,getList:oe,hide:re,show:ie,isArrayOrList:le,addClass:ae,removeClass:ce,appendTo:se,wrap:ue,wrapAll:fe,wrapInner:de,closest:ve,after:pe,before:he,insertBefore:ge,getScrollTop:me,siblings:be,preventDefault:Se,isFunction:ye,trigger:we,matches:Ee,toggle:Le,createElementFromHTML:xe,remove:Te,filter:function(e,t){Array.prototype.filter.call(e,t)},untilAll:Ae,nextAll:ke,prevAll:Me},function(G,oe){var le=oe&&new RegExp("([\\d\\w]{8}-){3}[\\d\\w]{8}|OPEN-SOURCE-GPLV3-LICENSE").test(oe.licenseKey)||t.domain.indexOf("alvarotrigo.com")>-1;if(!K(W("html"),a)){var ue=W("html, body"),ge=W("body")[0],Ae={};oe=X({menu:!1,anchors:[],lockAnchors:!1,navigation:!1,navigationPosition:"right",navigationTooltips:[],showActiveTooltip:!1,slidesNavigation:!1,slidesNavPosition:"bottom",scrollBar:!1,hybrid:!1,css3:!0,scrollingSpeed:700,autoScrolling:!0,fitToSection:!0,fitToSectionDelay:1e3,easing:"easeInOutCubic",easingcss3:"ease",loopBottom:!1,loopTop:!1,loopHorizontal:!0,continuousVertical:!1,continuousHorizontal:!1,scrollHorizontally:!1,interlockedSlides:!1,dragAndMove:!1,offsetSections:!1,resetSliders:!1,fadingEffect:!1,normalScrollElements:null,scrollOverflow:!1,scrollOverflowReset:!1,scrollOverflowHandler:e.fp_scrolloverflow?e.fp_scrolloverflow.iscrollHandler:null,scrollOverflowOptions:null,touchSensitivity:5,normalScrollElementTouchThreshold:5,bigSectionsDestination:null,keyboardScrolling:!0,animateAnchor:!0,recordHistory:!0,controlArrows:!0,controlArrowColor:"#fff",verticalCentered:!0,sectionsColor:[],paddingTop:0,paddingBottom:0,fixedElements:null,responsive:0,responsiveWidth:0,responsiveHeight:0,responsiveSlides:!1,parallax:!1,parallaxOptions:{type:"reveal",percentage:62,property:"translate"},sectionSelector:v,slideSelector:A,v2compatible:!1,afterLoad:null,onLeave:null,afterRender:null,afterResize:null,afterReBuild:null,afterSlideLoad:null,onSlideLeave:null,afterResponsive:null,lazyLoading:!0},oe);var Oe,Ce,He,Ie,Re=!1,Be=navigator.userAgent.match(/(iPhone|iPod|iPad|Android|playbook|silk|BlackBerry|BB10|Windows Phone|Tizen|Bada|webOS|IEMobile|Opera Mini)/),je="ontouchstart"in e||navigator.msMaxTouchPoints>0||navigator.maxTouchPoints,ze="string"==typeof G?W(G)[0]:G,Ne=q(),Pe=!1,De=!0,Ve=!0,_e=[],Ye={m:{up:!0,down:!0,left:!0,right:!0}};Ye.k=X({},Ye.m);var Fe,Ue,We,Xe,Ke,qe,Qe,Ge,$e=e.PointerEvent?{down:"pointerdown",move:"pointermove"}:{down:"MSPointerDown",move:"MSPointerMove"},Je={touchmove:"ontouchmove"in e?"touchmove":$e.move,touchstart:"ontouchstart"in e?"touchstart":$e.down},Ze='a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, [tabindex="0"], [contenteditable]',et=X({},oe);Dn(),e.fp_easings=X(e.fp_easings,{easeInOutCubic:function(e,t,n,o){return(e/=o/2)<1?n/2*e*e*e+t:n/2*((e-=2)*e*e+2)+t}}),ze&&(Ae.version="3.0.2",Ae.setAutoScrolling=ft,Ae.setRecordHistory=dt,Ae.setScrollingSpeed=vt,Ae.setFitToSection=pt,Ae.setLockAnchors=function(e){oe.lockAnchors=e},Ae.setMouseWheelScrolling=ht,Ae.setAllowScrolling=gt,Ae.setKeyboardScrolling=mt,Ae.moveSectionUp=bt,Ae.moveSectionDown=St,Ae.silentMoveTo=yt,Ae.moveTo=wt,Ae.moveSlideRight=Et,Ae.moveSlideLeft=Lt,Ae.fitToSection=Rt,Ae.reBuild=xt,Ae.setResponsive=Tt,Ae.getFullpageData=oe,Ae.destroy=function(n){ft(!1,"internal"),gt(!1),mt(!1),ae(ze,l),clearTimeout(Xe),clearTimeout(We),clearTimeout(Ue),clearTimeout(Ke),clearTimeout(qe),e.removeEventListener("scroll",It),e.removeEventListener("hashchange",nn),e.removeEventListener("resize",mn),t.removeEventListener("keydown",rn),t.removeEventListener("keyup",an);var o=[dn,ln,un,vn];["click","touchstart"].forEach(function(e){o.forEach(function(n){t.removeEventListener(e,n)})}),["mouseenter","touchstart","mouseleave","touchend"].forEach(function(e){t.removeEventListener(e,kt,!0)}),clearTimeout(Xe),clearTimeout(We),n&&(jn(0),W("img[data-src], source[data-src], audio[data-src], iframe[data-src]",ze).forEach(function(e){Qt(e,"src")}),W("img[data-srcset]").forEach(function(e){Qt(e,"srcset")}),Te(W(E+", "+z+", "+P)),Q(W(h),{height:"","background-color":"",padding:""}),Q(W(M),{width:""}),Q(ze,{height:"",position:"","-ms-touch-action":"","touch-action":""}),Q(ue,{overflow:"",height:""}),ce(W("html"),a),ce(ge,r),ge.className.split(/\s+/).forEach(function(e){0===e.indexOf(c)&&ce(ge,e)}),W(h+", "+M).forEach(function(e){oe.scrollOverflowHandler&&oe.scrollOverflowHandler.remove(e),ce(e,B+" "+s+" "+f);var t=e.getAttribute("data-fp-styles");t&&e.setAttribute("style",e.getAttribute("data-fp-styles"))}),yn(ze),[b,R,H].forEach(function(e){W(e,ze).forEach(function(e){e.outerHTML=e.innerHTML})}),Q(ze,{"-webkit-transition":"none",transition:"none"}),W("html")[0].scrollTo(0,0),W("body")[0].scrollTo(0,0),[p,k,I].forEach(function(e){ce(W("."+e),e)}))},Ae.getActiveSection=function(){return new Fn(W(g)[0])},Ae.getActiveSlide=function(){return Xt(W(O,W(g)[0])[0])},Ae.test={top:"0px",translate3d:"translate3d(0px, 0px, 0px)",translate3dH:function(){for(var e=[],t=0;t<W(oe.sectionSelector,ze).length;t++)e.push("translate3d(0px, 0px, 0px)");return e}(),left:function(){for(var e=[],t=0;t<W(oe.sectionSelector,ze).length;t++)e.push(0);return e}(),options:oe,setAutoScrolling:ft},Ae.shared={afterRenderActions:Ht},e.fullpage_api=Ae,oe.css3&&(oe.css3=function(){var n,o=t.createElement("p"),r={webkitTransform:"-webkit-transform",OTransform:"-o-transform",msTransform:"-ms-transform",MozTransform:"-moz-transform",transform:"transform"};for(var i in o.style.display="block",t.body.insertBefore(o,null),r)void 0!==o.style[i]&&(o.style[i]="translate3d(1px,1px,1px)",n=e.getComputedStyle(o).getPropertyValue(r[i]));return t.body.removeChild(o),void 0!==n&&n.length>0&&"none"!==n}()),oe.scrollBar=oe.scrollBar||oe.hybrid,function(){if(!oe.anchors.length){var e="[data-anchor]",t=W(oe.sectionSelector.split(",").join(e+",")+e,ze);t.length&&t.forEach(function(e){oe.anchors.push(e.getAttribute("data-anchor").toString())})}if(!oe.navigationTooltips.length){var e="[data-tooltip]",n=W(oe.sectionSelector.split(",").join(e+",")+e,ze);n.length&&n.forEach(function(e){oe.navigationTooltips.push(e.getAttribute("data-tooltip").toString())})}}(),function(){Q(ze,{height:"100%",position:"relative"}),ae(ze,n),ae(W("html"),a),Ne=q(),ce(ze,l),ae(W(oe.sectionSelector,ze),p),ae(W(oe.slideSelector,ze),k);for(var e=W(h),o=0;o<e.length;o++){var r=o,i=e[o],c=W(M,i),u=c.length;i.setAttribute("data-fp-styles",i.getAttribute("style")),Ot(i,r),Ct(i,r),u>0?Mt(i,c,u):oe.verticalCentered&&Ln(i)}oe.fixedElements&&oe.css3&&W(oe.fixedElements).forEach(function(e){ge.appendChild(e)}),oe.navigation&&function(){var e=t.createElement("div");e.setAttribute("id",w);var n=t.createElement("ul");e.appendChild(n),se(e,ge);var o=W(E)[0];ae(o,"fp-"+oe.navigationPosition),oe.showActiveTooltip&&ae(o,T);for(var r="",i=0;i<W(h).length;i++){var l="";oe.anchors.length&&(l=oe.anchors[i]),r+='<li><a href="#'+l+'"><span></span></a>';var a=oe.navigationTooltips[i];void 0!==a&&""!==a&&(r+='<div class="'+L+" fp-"+oe.navigationPosition+'">'+a+"</div>"),r+="</li>"}W("ul",o)[0].innerHTML=r,Q(W(E),{"margin-top":"-"+W(E)[0].offsetHeight/2+"px"}),ae(W("a",W("li",W(E)[0])[ne(W(g)[0],h)]),s)}(),W('iframe[src*="youtube.com/embed/"]',ze).forEach(function(e){!function(e,t){var n=e.getAttribute("src");e.setAttribute("src",n+function(e){return/\?/.test(e)?"&":"?"}(n)+t)}(e,"enablejsapi=1")}),oe.scrollOverflow?Fe=oe.scrollOverflowHandler.init(oe):Ht()}(),gt(!0),ft(oe.autoScrolling,"internal"),bn(),In(),"complete"===t.readyState&&tn(),e.addEventListener("load",tn),e.addEventListener("scroll",It),e.addEventListener("hashchange",nn),e.addEventListener("blur",fn),e.addEventListener("resize",mn),t.addEventListener("keydown",rn),t.addEventListener("keyup",an),["click","touchstart"].forEach(function(e){t.addEventListener(e,function(e){var t=e.target;t&&ve(t,E+" a")?dn.call(t,e):Ee(t,x)?ln.call(t):Ee(t,P)?un.call(t,e):(Ee(t,N)||null!=ve(t,N))&&vn.call(t,e)})}),oe.normalScrollElements&&(["mouseenter","touchstart"].forEach(function(e){At(e,!1)}),["mouseleave","touchend"].forEach(function(e){At(e,!0)})));var tt=!1,nt=0,ot=0,rt=0,it=0,lt=0,at=(new Date).getTime(),ct=0,st=0,ut=Ne;return Ae}function ft(e,t){e||jn(0),Pn("autoScrolling",e,t);var n=W(g)[0];if(oe.autoScrolling&&!oe.scrollBar)Q(ue,{overflow:"hidden",height:"100%"}),dt(et.recordHistory,"internal"),Q(ze,{"-ms-touch-action":"none","touch-action":"none"}),null!=n&&jn(n.offsetTop);else if(Q(ue,{overflow:"visible",height:"initial"}),dt(!1,"internal"),Q(ze,{"-ms-touch-action":"","touch-action":""}),null!=n){var o=Kt(n.offsetTop);o.element.scrollTo(0,o.options)}}function dt(e,t){Pn("recordHistory",e,t)}function vt(e,t){Pn("scrollingSpeed",e,t)}function pt(e,t){Pn("fitToSection",e,t)}function ht(n){n?(function(){var n,o="";e.addEventListener?n="addEventListener":(n="attachEvent",o="on");var r="onwheel"in t.createElement("div")?"wheel":void 0!==t.onmousewheel?"mousewheel":"DOMMouseScroll";"DOMMouseScroll"==r?t[n](o+"MozMousePixelScroll",Vt,!1):t[n](o+r,Vt,!1)}(),ze.addEventListener("mousedown",cn),ze.addEventListener("mouseup",sn)):(t.addEventListener?(t.removeEventListener("mousewheel",Vt,!1),t.removeEventListener("wheel",Vt,!1),t.removeEventListener("MozMousePixelScroll",Vt,!1)):t.detachEvent("onmousewheel",Vt),ze.removeEventListener("mousedown",cn),ze.removeEventListener("mouseup",sn))}function gt(e,t){void 0!==t?(t=t.replace(/ /g,"").split(",")).forEach(function(t){Nn(e,t,"m")}):(Nn(e,"all","m"),e?(ht(!0),(Be||je)&&(oe.autoScrolling&&(ge.removeEventListener(Je.touchmove,jt,{passive:!1}),ge.addEventListener(Je.touchmove,jt,{passive:!1})),W(o)[0].removeEventListener(Je.touchstart,Pt),W(o)[0].removeEventListener(Je.touchmove,zt,{passive:!1}),W(o)[0].addEventListener(Je.touchstart,Pt),W(o)[0].addEventListener(Je.touchmove,zt,{passive:!1}))):(ht(!1),(Be||je)&&(oe.autoScrolling&&(ge.removeEventListener(Je.touchmove,zt,{passive:!1}),ge.removeEventListener(Je.touchmove,jt,{passive:!1})),W(o)[0].removeEventListener(Je.touchstart,Pt),W(o)[0].removeEventListener(Je.touchmove,zt,{passive:!1}))))}function mt(e,t){void 0!==t?(t=t.replace(/ /g,"").split(",")).forEach(function(t){Nn(e,t,"k")}):(Nn(e,"all","k"),oe.keyboardScrolling=e)}function bt(){var e=$(W(g)[0],h);e||!oe.loopTop&&!oe.continuousVertical||(e=te(W(h))),null!=e&&Ft(e,null,!0)}function St(){var e=J(W(g)[0],h);e||!oe.loopBottom&&!oe.continuousVertical||(e=W(h)[0]),null!=e&&Ft(e,null,!1)}function yt(e,t){vt(0,"internal"),wt(e,t),vt(et.scrollingSpeed,"internal")}function wt(e,t){var n=An(e);void 0!==t?kn(e,t):null!=n&&Ft(n)}function Et(e){_t("right",e)}function Lt(e){_t("left",e)}function xt(t){if(!K(ze,l)){Pe=!0,Ne=q();for(var n=W(h),o=0;o<n.length;++o){var r=n[o],i=W(H,r)[0],a=W(M,r);oe.verticalCentered&&Q(W(b,r),{height:xn(r)+"px"}),Q(r,{height:Ne+"px"}),a.length>1&&hn(i,W(O,i)[0])}oe.scrollOverflow&&Fe.createScrollBarForAll();var c=ne(W(g)[0],h);c&&yt(c+1),Pe=!1,ye(oe.afterResize)&&t&&oe.afterResize.call(ze,e.innerWidth,e.innerHeight),ye(oe.afterReBuild)&&!t&&oe.afterReBuild.call(ze)}}function Tt(e){var t=K(ge,r);e?t||(ft(!1,"internal"),pt(!1,"internal"),re(W(E)),ae(ge,r),ye(oe.afterResponsive)&&oe.afterResponsive.call(ze,e)):t&&(ft(et.autoScrolling,"internal"),pt(et.autoScrolling,"internal"),ie(W(E)),ce(ge,r),ye(oe.afterResponsive)&&oe.afterResponsive.call(ze,e))}function At(e,n){t["fp_"+e]=n,t.addEventListener(e,kt,!0)}function kt(e){e.target!=t&&oe.normalScrollElements.split(",").forEach(function(n){Ee(e.target,n)&&gt(t["fp_"+e.type])})}function Mt(e,n,o){var r=100*o,i=100/o,l=t.createElement("div");l.className=C,fe(n,l);var a=t.createElement("div");a.className=I,fe(n,a),Q(W(R,e),{width:r+"%"}),o>1&&(oe.controlArrows&&function(e){var t=[xe('<div class="'+V+'"></div>'),xe('<div class="'+Y+'"></div>')];pe(W(H,e)[0],t),"#fff"!==oe.controlArrowColor&&(Q(W(F,e),{"border-color":"transparent transparent transparent "+oe.controlArrowColor}),Q(W(_,e),{"border-color":"transparent "+oe.controlArrowColor+" transparent transparent"})),oe.loopHorizontal||re(W(_,e))}(e),oe.slidesNavigation&&function(e,t){se(xe('<div class="'+j+'"><ul></ul></div>'),e);var n=W(z,e)[0];ae(n,"fp-"+oe.slidesNavPosition);for(var o=0;o<t;o++)se(xe('<li><a href="#"><span></span></a></li>'),W("ul",n)[0]);Q(n,{"margin-left":"-"+n.innerWidth/2+"px"}),ae(W("a",W("li",n)[0]),s)}(e,o)),n.forEach(function(e){Q(e,{width:i+"%"}),oe.verticalCentered&&Ln(e)});var c=W(O,e)[0];null!=c&&(0!==ne(W(g),h)||0===ne(W(g),h)&&0!==ne(c))?Bn(c,"internal"):ae(n[0],s)}function Ot(e,t){t||null!=W(g)[0]||ae(e,s),Ie=W(g)[0],Q(e,{height:Ne+"px"}),oe.paddingTop&&Q(e,{"padding-top":oe.paddingTop}),oe.paddingBottom&&Q(e,{"padding-bottom":oe.paddingBottom}),void 0!==oe.sectionsColor[t]&&Q(e,{"background-color":oe.sectionsColor[t]}),void 0!==oe.anchors[t]&&e.setAttribute("data-anchor",oe.anchors[t])}function Ct(e,t){void 0!==oe.anchors[t]&&K(e,s)&&wn(oe.anchors[t],t),oe.menu&&oe.css3&&null!=ve(W(oe.menu)[0],o)&&ge.appendChild(W(oe.menu)[0])}function Ht(){var e=W(g)[0];ae(e,f),Gt(e),$t(e),oe.scrollOverflow&&oe.scrollOverflowHandler.afterLoad(),function(){var e=An(on().section);return!e||void 0!==e&&ne(e)===ne(Ie)}()&&ye(oe.afterLoad)&&Ut("afterLoad",{activeSection:null,element:e,direction:null,anchorLink:e.getAttribute("data-anchor"),sectionIndex:ne(e,h)}),ye(oe.afterRender)&&Ut("afterRender")}function It(){var e;if(!oe.autoScrolling||oe.scrollBar){var t=me(),n=function(e){var t=e>nt?"down":"up";return nt=e,ct=e,t}(t),o=0,r=t+q()/2,i=ge.offsetHeight-q()===t,l=W(h);if(i)o=l.length-1;else if(t)for(var a=0;a<l.length;++a)l[a].offsetTop<=r&&(o=a);else o=0;if(function(e){var t=W(g)[0].offsetTop,n=t+q();return"up"==e?n>=me()+q():t<=me()}(n)&&(K(W(g)[0],f)||(ae(W(g)[0],f),ce(be(W(g)[0]),f))),!K(e=l[o],s)){tt=!0;var c,u,d=W(g)[0],v=ne(d,h)+1,p=En(e),m=e.getAttribute("data-anchor"),b=ne(e,h)+1,S=W(O,e)[0],y={activeSection:d,sectionIndex:b-1,anchorLink:m,element:e,leavingSection:v,direction:p};S&&(u=S.getAttribute("data-anchor"),c=ne(S)),Ve&&(ae(e,s),ce(be(e),s),ye(oe.onLeave)&&Ut("onLeave",y),ye(oe.afterLoad)&&Ut("afterLoad",y),Zt(d),Gt(e),$t(e),wn(m,b-1),oe.anchors.length&&(Oe=m),On(c,u,m)),clearTimeout(Ke),Ke=setTimeout(function(){tt=!1},100)}oe.fitToSection&&(clearTimeout(qe),qe=setTimeout(function(){oe.fitToSection&&W(g)[0].offsetHeight<=Ne&&Rt()},oe.fitToSectionDelay))}}function Rt(){Ve&&(Pe=!0,Ft(W(g)[0]),Pe=!1)}function Bt(e){if(Ye.m[e]){var t="down"===e?St:bt;if(oe.scrollOverflow){var n=oe.scrollOverflowHandler.scrollable(W(g)[0]),o="down"===e?"bottom":"top";if(null!=n){if(!oe.scrollOverflowHandler.isScrolled(o,n))return!0;t()}else t()}else t()}}function jt(e){oe.autoScrolling&&Nt(e)&&Se(e)}function zt(t){var n=ve(t.target,h);if(Nt(t)){oe.autoScrolling&&Se(t);var o=Rn(t);it=o.y,lt=o.x,W(H,n).length&&Math.abs(rt-lt)>Math.abs(ot-it)?!Re&&Math.abs(rt-lt)>e.innerWidth/100*oe.touchSensitivity&&(rt>lt?Ye.m.right&&Et(n):Ye.m.left&&Lt(n)):oe.autoScrolling&&Ve&&Math.abs(ot-it)>e.innerHeight/100*oe.touchSensitivity&&(ot>it?Bt("down"):it>ot&&Bt("up"))}}function Nt(e){return void 0===e.pointerType||"mouse"!=e.pointerType}function Pt(e){if(oe.fitToSection&&(Ge=!1),Nt(e)){var t=Rn(e);ot=t.y,rt=t.x}}function Dt(e,t){for(var n=0,o=e.slice(Math.max(e.length-t,1)),r=0;r<o.length;r++)n+=o[r];return Math.ceil(n/t)}function Vt(t){var n=(new Date).getTime(),o=K(W(d)[0],y);if(oe.autoScrolling&&!He&&!o){var r=(t=t||e.event).wheelDelta||-t.deltaY||-t.detail,i=Math.max(-1,Math.min(1,r)),l=void 0!==t.wheelDeltaX||void 0!==t.deltaX,a=Math.abs(t.wheelDeltaX)<Math.abs(t.wheelDelta)||Math.abs(t.deltaX)<Math.abs(t.deltaY)||!l;_e.length>149&&_e.shift(),_e.push(Math.abs(r)),oe.scrollBar&&Se(t);var c=n-at;return at=n,c>200&&(_e=[]),Ve&&Dt(_e,10)>=Dt(_e,70)&&a&&Bt(i<0?"down":"up"),!1}oe.fitToSection&&(Ge=!1)}function _t(e,t){var n=null==t?W(g)[0]:t,o=W(H,n)[0];if(!(null==o||Re||W(M,o).length<2)){var r=W(O,o)[0],i=null;if(null==(i="left"===e?$(r,M):J(r,M))){if(!oe.loopHorizontal)return;var l=be(r);i="left"===e?l[l.length-1]:l[0]}Re=!Ae.test.isTesting,hn(o,i,e)}}function Yt(){for(var e=W(O),t=0;t<e.length;t++)Bn(e[t],"internal")}function Ft(e,t,n){if(null!=e){var o,r,i={element:e,callback:t,isMovementUp:n,dtop:function(e){var t=e.offsetHeight,n=e.offsetTop,o=n,r=n>ct,i=o-Ne+t,l=oe.bigSectionsDestination;return t>Ne?(r||l)&&"bottom"!==l||(o=i):(r||Pe&&null==ee(e))&&(o=i),ct=o,o}(e),yMovement:En(e),anchorLink:e.getAttribute("data-anchor"),sectionIndex:ne(e,h),activeSlide:W(O,e)[0],activeSection:W(g)[0],leavingSection:ne(W(g),h)+1,localIsResizing:Pe};if(!(i.activeSection==e&&!Pe||oe.scrollBar&&me()===i.dtop&&!K(e,S))){if(null!=i.activeSlide&&(o=i.activeSlide.getAttribute("data-anchor"),r=ne(i.activeSlide)),ye(oe.onLeave)&&!i.localIsResizing){var l=i.yMovement;if(void 0!==n&&(l=n?"up":"down"),i.direction=l,!1===Ut("onLeave",i))return}oe.autoScrolling&&oe.continuousVertical&&void 0!==i.isMovementUp&&(!i.isMovementUp&&"up"==i.yMovement||i.isMovementUp&&"down"==i.yMovement)&&(i=function(e){return e.isMovementUp?he(W(g)[0],ke(e.activeSection,h)):pe(W(g)[0],Me(e.activeSection,h).reverse()),jn(W(g)[0].offsetTop),Yt(),e.wrapAroundElements=e.activeSection,e.dtop=e.element.offsetTop,e.yMovement=En(e.element),e.leavingSection=ne(e.activeSection,h)+1,e.sectionIndex=ne(e.element,h),e}(i)),i.localIsResizing||Zt(i.activeSection),oe.scrollOverflow&&oe.scrollOverflowHandler.beforeLeave(),ae(e,s),ce(be(e),s),Gt(e),oe.scrollOverflow&&oe.scrollOverflowHandler.onLeave(),Ve=Ae.test.isTesting,On(r,o,i.anchorLink,i.sectionIndex),function(e){if(oe.css3&&oe.autoScrolling&&!oe.scrollBar){var t="translate3d(0px, -"+Math.round(e.dtop)+"px, 0px)";Tn(t,!0),oe.scrollingSpeed?(clearTimeout(We),We=setTimeout(function(){qt(e)},oe.scrollingSpeed)):qt(e)}else{var n=Kt(e.dtop);Ae.test.top=-e.dtop+"px",Vn(n.element,n.options,oe.scrollingSpeed,function(){oe.scrollBar?setTimeout(function(){qt(e)},30):qt(e)})}}(i),Oe=i.anchorLink,wn(i.anchorLink,i.sectionIndex)}}}function Ut(e,t){var n=function(e,t){var n;return(n=oe.v2compatible?{afterRender:function(){return[ze]},onLeave:function(){return[t.activeSection,t.leavingSection,t.sectionIndex+1,t.direction]},afterLoad:function(){return[t.element,t.anchorLink,t.sectionIndex+1]},afterSlideLoad:function(){return[t.destiny,t.anchorLink,t.sectionIndex+1,t.slideAnchor,t.slideIndex]},onSlideLeave:function(){return[t.prevSlide,t.anchorLink,t.sectionIndex+1,t.prevSlideIndex,t.direction,t.slideIndex]}}:{afterRender:function(){return{section:Wt(W(g)[0]),slide:Xt(W(O,W(g)[0])[0])}},onLeave:function(){return{origin:Wt(t.activeSection),destination:Wt(t.element),direction:t.direction}},afterLoad:function(){return n.onLeave()},afterSlideLoad:function(){return{section:Wt(t.section),origin:Xt(t.prevSlide),destination:Xt(t.destiny),direction:t.direction}},onSlideLeave:function(){return n.afterSlideLoad()}})[e]()}(e,t);if(oe.v2compatible){if(!1===oe[e].apply(n[0],n.slice(1)))return!1}else if(we(ze,e,n),!1===oe[e].apply(n[Object.keys(n)[0]],function(e){return Object.keys(e).map(function(t){return e[t]})}(n)))return!1;return!0}function Wt(e){return e?new Fn(e):null}function Xt(e){return e?new function(e){Yn.call(this,e,M)}(e):null}function Kt(t){var n={};return oe.autoScrolling&&!oe.scrollBar?(n.options=-t,n.element=W(o)[0]):(n.options=t,n.element=e),n}function qt(e){!function(e){null!=e.wrapAroundElements&&(e.isMovementUp?he(W(h)[0],e.wrapAroundElements):pe(W(h)[W(h).length-1],e.wrapAroundElements),jn(W(g)[0].offsetTop),Yt())}(e),ye(oe.afterLoad)&&!e.localIsResizing&&Ut("afterLoad",e),oe.scrollOverflow&&oe.scrollOverflowHandler.afterLoad(),e.localIsResizing||$t(e.element),ae(e.element,f),ce(be(e.element),f),Ve=!0,ye(e.callback)&&e.callback()}function Qt(e,t){e.setAttribute(t,e.getAttribute("data-"+t)),e.removeAttribute("data-"+t)}function Gt(e){oe.lazyLoading&&W("img[data-src], img[data-srcset], source[data-src], source[data-srcset], video[data-src], audio[data-src], iframe[data-src]",en(e)).forEach(function(e){if(["src","srcset"].forEach(function(t){var n=e.getAttribute("data-"+t);null!=n&&n&&Qt(e,t)}),Ee(e,"source")){var t=ve(e,"video, audio");t&&t.load()}})}function $t(e){var t=en(e);W("video, audio",t).forEach(function(e){e.hasAttribute("data-autoplay")&&"function"==typeof e.play&&e.play()}),W('iframe[src*="youtube.com/embed/"]',t).forEach(function(e){e.hasAttribute("data-autoplay")&&Jt(e),e.onload=function(){e.hasAttribute("data-autoplay")&&Jt(e)}})}function Jt(e){e.contentWindow.postMessage('{"event":"command","func":"playVideo","args":""}',"*")}function Zt(e){var t=en(e);W("video, audio",t).forEach(function(e){e.hasAttribute("data-keepplaying")||"function"!=typeof e.pause||e.pause()}),W('iframe[src*="youtube.com/embed/"]',t).forEach(function(e){/youtube\.com\/embed\//.test(e.getAttribute("src"))&&!e.hasAttribute("data-keepplaying")&&e.contentWindow.postMessage('{"event":"command","func":"pauseVideo","args":""}',"*")})}function en(e){var t=W(O,e);return t.length&&(e=t[0]),e}function tn(){var e=on(),t=e.section,n=e.slide;t&&(oe.animateAnchor?kn(t,n):yt(t,n))}function nn(){if(!tt&&!oe.lockAnchors){var e=on(),t=e.section,n=e.slide,o=void 0===Oe,r=void 0===Oe&&void 0===n&&!Re;t&&t.length&&(t&&t!==Oe&&!o||r||!Re&&Ce!=n)&&kn(t,n)}}function on(){var t,n,o=e.location.hash;if(o.length){var r=o.replace("#","").split("/"),i=o.indexOf("#/")>-1;t=i?"/"+r[1]:decodeURIComponent(r[0]);var l=i?r[2]:r[1];l&&l.length&&(n=decodeURIComponent(l))}return{section:t,slide:n}}function rn(e){clearTimeout(Qe);var n=t.activeElement,o=e.keyCode;9===o?function(e){var n=e.shiftKey,o=t.activeElement,r=W(g)[0],i=W(O,r)[0],l=W(Ze+':not([tabindex="-1"])',i||r);function a(e){return Se(e),l[0].focus()}o?null==ve(o,g+","+O)&&(o=a(e)):a(e),(!n&&o==l[l.length-1]||n&&o==l[0])&&Se(e)}(e):Ee(n,"textarea")||Ee(n,"input")||Ee(n,"select")||"true"===n.getAttribute("contentEditable")||""===n.getAttribute("contentEditable")||!oe.keyboardScrolling||!oe.autoScrolling||([40,38,32,33,34].indexOf(o)>-1&&Se(e),He=e.ctrlKey,Qe=setTimeout(function(){!function(e){var t=e.shiftKey;if(Ve||!([37,39].indexOf(e.keyCode)<0))switch(e.keyCode){case 38:case 33:Ye.k.up&&bt();break;case 32:if(t&&Ye.k.up){bt();break}case 40:case 34:Ye.k.down&&St();break;case 36:Ye.k.up&&wt(1);break;case 35:Ye.k.down&&wt(W(h).length);break;case 37:Ye.k.left&&Lt();break;case 39:Ye.k.right&&Et()}}(e)},150))}function ln(){we(Z(this),"click")}function an(e){De&&(He=e.ctrlKey)}function cn(e){2==e.which&&(st=e.pageY,ze.addEventListener("mousemove",pn))}function sn(e){2==e.which&&ze.removeEventListener("mousemove",pn)}function un(){var e=ve(this,h);K(this,D)?Ye.m.left&&Lt(e):Ye.m.right&&Et(e)}function fn(){De=!1,He=!1}function dn(e){Se(e);var t=ne(ve(this,E+" li"));Ft(W(h)[t])}function vn(e){Se(e);var t=W(H,ve(this,h))[0];hn(t,W(M,t)[ne(ve(this,"li"))])}function pn(e){Ve&&(e.pageY<st&&Ye.m.up?bt():e.pageY>st&&Ye.m.down&&St()),st=e.pageY}function hn(e,t,n){var o=ve(e,h),r={slides:e,destiny:t,direction:n,destinyPos:{left:t.offsetLeft},slideIndex:ne(t),section:o,sectionIndex:ne(o,h),anchorLink:o.getAttribute("data-anchor"),slidesNav:W(z,o)[0],slideAnchor:Hn(t),prevSlide:W(O,o)[0],prevSlideIndex:ne(W(O,o)[0]),localIsResizing:Pe};r.xMovement=function(e,t){return e==t?"none":e>t?"left":"right"}(r.prevSlideIndex,r.slideIndex),r.localIsResizing||(Ve=!1),oe.onSlideLeave&&!r.localIsResizing&&"none"!==r.xMovement&&ye(oe.onSlideLeave)&&!1===Ut("onSlideLeave",r)?Re=!1:(ae(t,s),ce(be(t),s),r.localIsResizing||(Zt(r.prevSlide),Gt(t)),!oe.loopHorizontal&&oe.controlArrows&&(Le(W(_,o),0!==r.slideIndex),Le(W(F,o),null!=ee(t))),K(o,s)&&!r.localIsResizing&&On(r.slideIndex,r.slideAnchor,r.anchorLink,r.sectionIndex),function(e,t,n){var o=t.destinyPos;if(oe.css3){var r="translate3d(-"+Math.round(o.left)+"px, 0px, 0px)";Ae.test.translate3dH[t.sectionIndex]=r,Q(Sn(W(R,e)),zn(r)),Xe=setTimeout(function(){n&&gn(t)},oe.scrollingSpeed)}else Ae.test.left[t.sectionIndex]=Math.round(o.left),Vn(e,Math.round(o.left),oe.scrollingSpeed,function(){n&&gn(t)})}(e,r,!0))}function gn(e){!function(e,t){oe.slidesNavigation&&null!=e&&(ce(W(u,e),s),ae(W("a",W("li",e)[t]),s))}(e.slidesNav,e.slideIndex),e.localIsResizing||(ye(oe.afterSlideLoad)&&Ut("afterSlideLoad",e),Ve=!0,$t(e.destiny)),Re=!1}function mn(){if(bn(),Be){var e=t.activeElement;if(!Ee(e,"textarea")&&!Ee(e,"input")&&!Ee(e,"select")){var n=q();Math.abs(n-ut)>20*Math.max(ut,n)/100&&(xt(!0),ut=n)}}else clearTimeout(Ue),Ue=setTimeout(function(){xt(!0)},350)}function bn(){var t=oe.responsive||oe.responsiveWidth,n=oe.responsiveHeight,o=t&&e.innerWidth<t,r=n&&e.innerHeight<n;t&&n?Tt(o||r):t?Tt(o):n&&Tt(r)}function Sn(e){var t="all "+oe.scrollingSpeed+"ms "+oe.easingcss3;return ce(e,i),Q(e,{"-webkit-transition":t,transition:t})}function yn(e){return ae(e,i)}function wn(e,t){!function(e){var t=W(oe.menu)[0];oe.menu&&null!=t&&(ce(W(u,t),s),ae(W('[data-menuanchor="'+e+'"]',t),s))}(e),function(e,t){oe.navigation&&null!=W(E)[0]&&(ce(W(u,W(E)[0]),s),ae(e?W('a[href="#'+e+'"]',W(E)[0]):W("a",W("li",W(E)[0])[t]),s))}(e,t)}function En(e){var t=ne(W(g)[0],h),n=ne(e,h);return t==n?"none":t>n?"up":"down"}function Ln(e){if(!K(e,B)){var n=t.createElement("div");n.className=m,n.style.height=xn(e)+"px",ae(e,B),de(e,n)}}function xn(e){var t=Ne;if(oe.paddingTop||oe.paddingBottom){var n=e;K(n,p)||(n=ve(e,h));var o=parseInt(getComputedStyle(n)["padding-top"])+parseInt(getComputedStyle(n)["padding-bottom"]);t=Ne-o}return t}function Tn(e,t){t?Sn(ze):yn(ze),Q(ze,zn(e)),Ae.test.translate3d=e,setTimeout(function(){ce(ze,i)},10)}function An(e){var t=W(h+'[data-anchor="'+e+'"]',ze)[0];if(!t){var n=void 0!==e?e-1:0;t=W(h)[n]}return t}function kn(e,t){var n=An(e);if(null!=n){var o=function(e,t){var n=W(M+'[data-anchor="'+e+'"]',t)[0];return null==n&&(e=void 0!==e?e:0,n=W(M,t)[e]),n}(t,n);e===Oe||K(n,s)?Mn(o):Ft(n,function(){Mn(o)})}}function Mn(e){null!=e&&hn(ve(e,H),e)}function On(e,t,n,o){var r="";oe.anchors.length&&!oe.lockAnchors&&(e?(null!=n&&(r=n),null==t&&(t=e),Ce=t,Cn(r+"/"+t)):null!=e?(Ce=t,Cn(n)):Cn(n)),In()}function Cn(t){if(oe.recordHistory)location.hash=t;else if(Be||je)e.history.replaceState(void 0,void 0,"#"+t);else{var n=e.location.href.split("#")[0];e.location.replace(n+"#"+t)}}function Hn(e){if(!e)return null;var t=e.getAttribute("data-anchor"),n=ne(e);return null==t&&(t=n),t}function In(){var e=W(g)[0],t=W(O,e)[0],n=Hn(e),o=Hn(t),r=String(n);t&&(r=r+"-"+o),r=r.replace("/","-").replace("#","");var i=new RegExp("\\b\\s?"+c+"-[^\\s]+\\b","g");ge.className=ge.className.replace(i,""),ae(ge,c+"-"+r)}function Rn(e){var t=[];return t.y=void 0!==e.pageY&&(e.pageY||e.pageX)?e.pageY:e.touches[0].pageY,t.x=void 0!==e.pageX&&(e.pageY||e.pageX)?e.pageX:e.touches[0].pageX,je&&Nt(e)&&oe.scrollBar&&void 0!==e.touches&&(t.y=e.touches[0].pageY,t.x=e.touches[0].pageX),t}function Bn(e,t){vt(0,"internal"),void 0!==t&&(Pe=!0),hn(ve(e,H),e),void 0!==t&&(Pe=!1),vt(et.scrollingSpeed,"internal")}function jn(e){var t=Math.round(e);if(oe.css3&&oe.autoScrolling&&!oe.scrollBar)Tn("translate3d(0px, -"+t+"px, 0px)",!1);else if(oe.autoScrolling&&!oe.scrollBar)Q(ze,{top:-t+"px"}),Ae.test.top=-t+"px";else{var n=Kt(t);_n(n.element,n.options)}}function zn(e){return{"-webkit-transform":e,"-moz-transform":e,"-ms-transform":e,transform:e}}function Nn(e,t,n){"all"!==t?Ye[n][t]=e:Object.keys(Ye[n]).forEach(function(t){Ye[n][t]=e})}function Pn(e,t,n){oe[e]=t,"internal"!==n&&(et[e]=t)}function Dn(){le||(U("error","Fullpage.js version 3 has changed its license to GPLv3 and it requires a `licenseKey` option. Read about it here:"),U("error","https://github.com/alvarotrigo/fullPage.js#options.")),K(W("html"),a)?U("error","Fullpage.js can only be initialized once and you are doing it multiple times!"):(oe.continuousVertical&&(oe.loopTop||oe.loopBottom)&&(oe.continuousVertical=!1,U("warn","Option `loopTop/loopBottom` is mutually exclusive with `continuousVertical`; `continuousVertical` disabled")),oe.scrollBar&&oe.scrollOverflow&&U("warn","Option `scrollBar` is mutually exclusive with `scrollOverflow`. Sections with scrollOverflow might not work well in Firefox"),!oe.continuousVertical||!oe.scrollBar&&oe.autoScrolling||(oe.continuousVertical=!1,U("warn","Scroll bars (`scrollBar:true` or `autoScrolling:false`) are mutually exclusive with `continuousVertical`; `continuousVertical` disabled")),oe.scrollOverflow&&null==oe.scrollOverflowHandler&&(oe.scrollOverflow=!1,U("error","The option `scrollOverflow:true` requires the file `scrolloverflow.min.js`. Please include it before fullPage.js.")),["fadingEffect","continuousHorizontal","scrollHorizontally","interlockedSlides","resetSliders","responsiveSlides","offsetSections","dragAndMove","scrollOverflowReset","parallax"].forEach(function(e){oe[e]&&U("warn","fullpage.js extensions require fullpage.extensions.min.js file instead of the usual fullpage.js. Requested: "+e)}),oe.anchors.forEach(function(e){var t=[].slice.call(W("[name]")).filter(function(t){return t.getAttribute("name")&&t.getAttribute("name").toLowerCase()==e.toLowerCase()}),n=[].slice.call(W("[id]")).filter(function(t){return t.getAttribute("id")&&t.getAttribute("id").toLowerCase()==e.toLowerCase()});(n.length||t.length)&&(U("error","data-anchor tags can not have the same value as any `id` element on the site (or `name` element for IE)."),n.length&&U("error",'"'+e+'" is is being used by another element `id` property'),t.length&&U("error",'"'+e+'" is is being used by another element `name` property'))}))}function Vn(t,n,o,r){var i=function(t){return t.self!=e&&K(t,C)?t.scrollLeft:!oe.autoScrolling||oe.scrollBar?me():t.offsetTop}(t),l=n-i,a=0;Ge=!0;var c=function(){if(Ge){var s=n;a+=20,o&&(s=e.fp_easings[oe.easing](a,i,l,o)),_n(t,s),a<o?setTimeout(c,20):void 0!==r&&r()}else a<o&&r()};c()}function _n(t,n){!oe.autoScrolling||oe.scrollBar||t.self!=e&&K(t,C)?t.self!=e&&K(t,C)?t.scrollLeft=n:t.scrollTo(0,n):t.style.top=n+"px"}function Yn(e,t){this.anchor=e.getAttribute("data-anchor"),this.item=e,this.index=ne(e,t),this.isLast=this.index===W(t).length-1,this.isFirst=!this.index}function Fn(e){Yn.call(this,e,h)}Dn()}}),window.jQuery&&window.fullpage&&function(e,t){"use strict";e&&t?e.fn.fullpage=function(n){var o=new t("#"+e(this).attr("id"),n);Object.keys(o).forEach(function(t){e.fn.fullpage[t]=o[t]})}:window.fp_utils.showError("error","jQuery is required to use the jQuery fullpage adapter!")}(jQuery,fullpage)},function(e,t,n){"use strict";n.r(t);var o=n(0);new(n.n(o).a)("#myFullpage",{navigation:!0,sectionsColor:["#ff5f45","#0798ec","#fc6c7c","grey"]})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,